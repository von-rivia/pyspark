OPTIMIZAR TABLAS A ANALIZAR:
1) OPTIMIZA RECORRIDO POR LAS COLUMNAS ESPECIFICADAS
alter table NOMBRE_TABLA set tblproperties ('delta.dataSkippingStatsColumns' = 'columna1, columna2, ...');

2) REALIZA ESTADISTICAS DELTA
ANALYZE TABLE NOMBRE_TABLA COMPUTE DELTA STATISTICS;

3) PARTICIONAMIENTO DE LA INFORMACIÓN:
* SE USA BASTANTE EN LOS MATCH DE LOS JOIN
ALTER TABLE NOMBRE_TABLA CLUSTER BY(COLUMNA1, COLUMNA2, ...)
*Las columnas son las que más se consultan

4)
OPTIMIZE NOMBRE_TABLA

------------------------------------------------------------------------
CREACIÓN TABLAS:
1) CREATE TABLE NOMBRE_TABLA(COLUMNA1 TIPO, COLUMNA2 TIPO, ....)
USING DELTA

INSERCIÓN DATOS:
1) INSERTO INTO TABLE NOMBRE_TABLA
SELECT COLUMNA1 as NOMBRE1, COLUMNA2 as NOMBRE2, COLUMNA3 as NOMBRE3, ...
FROM read_files('PATH', format => 'csv',
delimiter => ' ',
header => false
)


*** DARLE UNA LECTURA AL read_files de PYTHON (SPARK)!!!

CAMBIAR DATOS:
1) UPDATE NOMBRE_TABLA SET COLUMNA = 'VALOR'
WHERE CONDICIÓN;

-------------------------------------------------------------------------------------------------------
DASHBOARD:
1) CREAR DASHBOARD: SELECCIONAR 3 PUNTITOS COSTADO DERECHO -> 
2) FILTRAR CAMPOS:
	I) SELECCIONAR DATA
	II) EJECUTAR QUERY DE FILTRO:
	SELECT * FROM NOMBRE_TABLA
	WHERE DATA = '2024-09-05'
* DRAFT: BORRADOR, PERMITE REALIZAR CAMBIOS. -> PUBLISHED: PUBLICADO, LOS USUARIOS PUEDEN VERLO, MODIFICARLO, ETC.
* TAMBIÉN SE PUEDEN FILTRAR EN CANVAS. SE AGREGA EN FILTER, SE AGREGA EL FIELD (CAMPO)

